{
  "uid" : "95a7ebc83d38bf16",
  "name" : "test_installApp",
  "fullName" : "case.apk_manage.test_apk.TestApk#test_installApp",
  "historyId" : "5a969fa527fd056ee19c62b007113842",
  "time" : {
    "start" : 1607398309336,
    "stop" : 1607398314504,
    "duration" : 5168
  },
  "status" : "broken",
  "statusMessage" : "airtest.core.error.AdbError: stdout[] stderr[adb: failed to install C:\\airtest_script\\base.apk: Failure [INSTALL_FAILED_VERSION_DOWNGRADE]\r\n]",
  "statusTrace" : "self = <case.apk_manage.test_apk.TestApk object at 0x000001B97AF060F0>\n\n    def test_installApp(self):\n>   \tcontinue_install()\n\ncase\\apk_manage\\test_apk.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncase\\apk_manage\\test_apk.py:63: in continue_install\n    android.install_app(filepath=apkpath,replace=True)\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\android.py:212: in install_app\n    return self.adb.install_app(filepath, replace=replace, install_options=install_options)\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\adb.py:571: in install_app\n    out = self.cmd(cmds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001B97ADE9550>\ncmds = ['install', '-r', 'C:\\\\airtest_script\\\\base.apk'], device = True, ensure_unicode = True, timeout = None\n\n    def cmd(self, cmds, device=True, ensure_unicode=True, timeout=None):\n        \"\"\"\n        Run the adb command(s) in subprocess and return the standard output\n    \n        Args:\n            cmds: command(s) to be run\n            device: if True, the device serial number must be specified by -s serialno argument\n            ensure_unicode: encode/decode unicode of standard outputs (stdout, stderr)\n            timeout: timeout in seconds\n    \n        Raises:\n            DeviceConnectionError: if any error occurs when connecting the device\n            AdbError: if any other adb error occurs\n    \n        Returns:\n            command(s) standard output (stdout)\n    \n        \"\"\"\n        proc = self.start_cmd(cmds, device)\n        if timeout:\n            stdout, stderr = proc_communicate_timeout(proc, timeout)\n        else:\n            stdout, stderr = proc.communicate()\n    \n        if ensure_unicode:\n            stdout = stdout.decode(get_std_encoding(sys.stdout))\n            stderr = stderr.decode(get_std_encoding(sys.stderr))\n    \n        if proc.returncode > 0:\n            # adb connection error\n            pattern = DeviceConnectionError.DEVICE_CONNECTION_ERROR\n            if isinstance(stderr, binary_type):\n                pattern = pattern.encode(\"utf-8\")\n            if re.search(pattern, stderr):\n                raise DeviceConnectionError(stderr)\n            else:\n>               raise AdbError(stdout, stderr)\nE               airtest.core.error.AdbError: stdout[] stderr[adb: failed to install C:\\airtest_script\\base.apk: Failure [INSTALL_FAILED_VERSION_DOWNGRADE]\r\nE               ]\n\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\adb.py:194: AdbError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "env_init",
    "time" : {
      "start" : 1607398303492,
      "stop" : 1607398304089,
      "duration" : 597
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "airtest.core.error.AdbError: stdout[] stderr[adb: failed to install C:\\airtest_script\\base.apk: Failure [INSTALL_FAILED_VERSION_DOWNGRADE]\r\n]",
    "statusTrace" : "self = <case.apk_manage.test_apk.TestApk object at 0x000001B97AF060F0>\n\n    def test_installApp(self):\n>   \tcontinue_install()\n\ncase\\apk_manage\\test_apk.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncase\\apk_manage\\test_apk.py:63: in continue_install\n    android.install_app(filepath=apkpath,replace=True)\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\android.py:212: in install_app\n    return self.adb.install_app(filepath, replace=replace, install_options=install_options)\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\adb.py:571: in install_app\n    out = self.cmd(cmds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001B97ADE9550>\ncmds = ['install', '-r', 'C:\\\\airtest_script\\\\base.apk'], device = True, ensure_unicode = True, timeout = None\n\n    def cmd(self, cmds, device=True, ensure_unicode=True, timeout=None):\n        \"\"\"\n        Run the adb command(s) in subprocess and return the standard output\n    \n        Args:\n            cmds: command(s) to be run\n            device: if True, the device serial number must be specified by -s serialno argument\n            ensure_unicode: encode/decode unicode of standard outputs (stdout, stderr)\n            timeout: timeout in seconds\n    \n        Raises:\n            DeviceConnectionError: if any error occurs when connecting the device\n            AdbError: if any other adb error occurs\n    \n        Returns:\n            command(s) standard output (stdout)\n    \n        \"\"\"\n        proc = self.start_cmd(cmds, device)\n        if timeout:\n            stdout, stderr = proc_communicate_timeout(proc, timeout)\n        else:\n            stdout, stderr = proc.communicate()\n    \n        if ensure_unicode:\n            stdout = stdout.decode(get_std_encoding(sys.stdout))\n            stderr = stderr.decode(get_std_encoding(sys.stderr))\n    \n        if proc.returncode > 0:\n            # adb connection error\n            pattern = DeviceConnectionError.DEVICE_CONNECTION_ERROR\n            if isinstance(stderr, binary_type):\n                pattern = pattern.encode(\"utf-8\")\n            if re.search(pattern, stderr):\n                raise DeviceConnectionError(stderr)\n            else:\n>               raise AdbError(stdout, stderr)\nE               airtest.core.error.AdbError: stdout[] stderr[adb: failed to install C:\\airtest_script\\base.apk: Failure [INSTALL_FAILED_VERSION_DOWNGRADE]\r\nE               ]\n\nC:\\virtualenv\\airtest\\lib\\site-packages\\airtest\\core\\android\\adb.py:194: AdbError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b4520f0c4a956c42",
      "name" : "log",
      "source" : "b4520f0c4a956c42.txt",
      "type" : "text/plain",
      "size" : 1053
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "env_init::0",
    "time" : {
      "start" : 1607398315002,
      "stop" : 1607398315075,
      "duration" : 73
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "apk"
  }, {
    "name" : "parentSuite",
    "value" : "case.apk_manage"
  }, {
    "name" : "suite",
    "value" : "test_apk"
  }, {
    "name" : "subSuite",
    "value" : "TestApk"
  }, {
    "name" : "host",
    "value" : "LAPTOP-3BSH24T4"
  }, {
    "name" : "thread",
    "value" : "18080-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.apk_manage.test_apk"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "apk" ]
  },
  "source" : "95a7ebc83d38bf16.json",
  "parameterValues" : [ ]
}